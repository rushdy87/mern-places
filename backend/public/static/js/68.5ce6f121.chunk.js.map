{"version":3,"file":"static/js/68.5ce6f121.chunk.js","mappings":"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","sources":["shared/components/FormElements/Input/Input.jsx","shared/components/ImageUpload/ImageUpload.jsx","shared/util/validators.js","user/pages/Auth/Auth.jsx"],"sourcesContent":["import { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case 'TOUCH':\n      return { ...state, isTouched: true };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n\n  const { onInput, id } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [onInput, id, value, isValid]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH',\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useState, useEffect, useRef } from 'react';\nimport { Button } from '../FormElements';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) return;\n\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  return (\n    <div className='form-control'>\n      <input\n        type='file'\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        name=''\n        id={props.id}\n        accept='.jpg, .png, .jpeg'\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className='image-upload__preview'>\n          {previewUrl && <img src={previewUrl} alt='Preview' />}\n          {!previewUrl && <p>Pleace pick an image.</p>}\n        </div>\n        <Button type='button' onClick={pickImageHandler}>\n          PiCK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MAXLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import { useState, useContext } from 'react';\n\nimport {\n  Card,\n  LoadingSpinner,\n  ErrorModal,\n} from '../../../shared/components/UIElements';\nimport { Input, Button } from '../../../shared/components/FormElements';\nimport ImageUpload from '../../../shared/components/ImageUpload/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../../shared/util/validators';\nimport { useForm, useHttpClient } from '../../../shared/hooks';\nimport { AuthContext } from '../../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const { login } = useContext(AuthContext);\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const { userId, token } = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            'Content-Type': 'application/json',\n          }\n        );\n\n        login(userId, token);\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append('email', formState.inputs.email.value);\n        formData.append('name', formState.inputs.name.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n\n        const { userId, token } = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          'POST',\n          formData\n        );\n\n        login(userId, token);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className='authentication'>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element='input'\n              id='name'\n              type='text'\n              label='Name'\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText='Please inter a name.'\n              onInput={inputHandler}\n            />\n          )}\n\n          {!isLoginMode && (\n            <ImageUpload id='image' center onInput={inputHandler} />\n          )}\n\n          <Input\n            element='input'\n            id='email'\n            type='email'\n            label='Email'\n            validators={[VALIDATOR_EMAIL()]}\n            errorText='Please inter a valid email.'\n            onInput={inputHandler}\n          />\n          <Input\n            element='input'\n            id='password'\n            type='password'\n            label='Password'\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText='Please inter a valid password, at least 6 characters.'\n            onInput={inputHandler}\n          />\n          <Button type='submit' disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          Switch to {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </>\n  );\n};\n\nexport default Auth;\n"],"names":["inputReducer","state","action","type","value","val","isValid","validate","validators","isTouched","props","inputState","dispatch","useReducer","initialValue","initialValid","onInput","id","useEffect","changeHandler","event","target","touchHandler","element","_jsx","placeholder","onChange","onBlur","rows","_jsxs","className","concat","children","htmlFor","label","errorText","file","setFile","useState","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","name","accept","pickedFile","fileIsValid","files","length","center","src","alt","Button","onClick","pickImageHandler","current","click","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","useHttpClient","login","useContext","AuthContext","formState","inputHandler","setFormData","useForm","email","password","_Fragment","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","async","preventDefault","userId","token","process","JSON","stringify","inputs","err","console","log","formData","FormData","append","image","Input","ImageUpload","disabled","inverse","switchModeHandler","undefined","prevMode"],"sourceRoot":""}